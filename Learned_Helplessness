LEARNED HELPLESSNESS- How young energetic IT Professionals become lazy and cynical.
I had an interesting conversation with my supervisor today about the difference between a younger IT engineer and a more experienced engineer. I was struck by the lack of fear a younger engineer on our team has. He was digging into projects that more seasoned engineers would not do for a myriad of reasons. Sometimes taking on projects can mean that from that point forward, that system has become your responsibility. When dealing with vendor OT (Operational Technology) systems, it is often best to rely on the vendor's support since support is often a part of the purchase on these systems. I have seen vendors refuse to service equipment if they knew that internal IT had attempted to fix the system. We also must make judgement calls on how much time we devote to fixing things that are outside our purview. Of course, there is the worst-case scenario of a "Cowboy Move".
My mentor introduced me to the phrase "Cowboy Move". He described a ritual that they had at a previous company where if someone didn't follow change management and some system went down, the engineer responsible for the outage would have to wear a cowboy hat the rest of the day. I have made a ton of cowboy moves in my time as an IT engineer. Sometimes you take an action that might be considered a cowboy move but it works out. Sometimes it is just part of the job, decisions must be made. Sometimes you are doing routine maintenance on a print server and the entire building loses the ability to print. No matter what the outcome, cowboy moves create one thing universally- STRESS! That stress gets internalized and manifests over time in different ways. For some, that stress can become fear which can become learned helplessness. I have been lucky to avoid the light hazing of being forced to wear a cowboy hat but I haven’t avoided trauma induced stress. 
Learned helplessness is the byproduct of trauma and/or lack of recognition for accomplishments. 
Let's imagine an engineer that hasn't updated any of their servers for years because they are so afraid that they might affect operations. They remember that one time they patched a server and it didn't come back up and all of the data was lost. They remember that they were called by their boss and yelled at. They remember all that stress and fear that followed that outage and now they rationalize that the best course of action is to do nothing. This engineer isn't going to risk patching systems for a hypothetical threat when the threat of the system having issues when it reboots is far more likely based on their lived experience. These engineers are afraid to make a single change because they are no longer confident that they could rebuild the system to the way it was prior to the change. These engineers are going to be suffering from imposter syndrome and learned helplessness if left in this environment for too long. For them, it is better to do nothing at all. These engineers will appear to be “lazy”.
Now conversely, let's imagine another engineer that might have started out like my younger coworker- fearless, confident, and driven. That engineer builds and builds. They document everything. They take risks. They get a ton done. However, after a while they notice, nobody really cares. They're still a junior engineer and the mid and seniors don't appear to be working as hard, taking the risks, getting things done or even documenting their work. So that engineer develops into a helpless engineer. They could fix the thing, but what is the point? They do not get more recognition for doing more work. Why would they stick their neck out to do anything when the juice isn't worth the squeeze. These engineers become viewed as “cynical”.
In both cases, these engineers we achieve the same results. Zero work gets done while the environment deteriorates around them. Technical debt mounts and eventually the questions of "Why take risks?" and "What's the point?" starts to be valid questions. Eventually the business will recognize that work has slowed (or stopped) and outcomes get worse and worse. 
If this all sounds like feelings, emotions, and psychology, well, that’s because it is. I would say that there are a few things to do to protect that younger engineer from these bad outcomes. 
1.	Develop psychologically safe workplaces. Reassure your engineers that it is okay to make a mistake. Hold blameless postmortems for outages/incidents. The engineers under your charge need to feel that their team/management has their backs so that they can feel confident carrying out their daily tasks. A routine task can result in an outage. Look at the Crowdstrike outage of 2024, the engineers that were deploying the update were probably doing something they have done hundreds of times without any issue. It just happened that this time it caused millions of machines around the world to crash. 
2.	Build systems that are redundant, highly available, distributed and built with the intention to be able to destroy the system and rebuild the system if necessary. These ephemeral systems are meant to be built with a declarative build tool like Ansible or Terraform/Open Tofu and can be spun back up on-demand. The classic "cattle not pets" idea.
3.	Have backups that have been tested. It should be dead-simple to restore a system from backup if a code-based re-build is not an option. There has to be a “CTRL-Z”. Mistakes are going to happen, and no level of top-down control will stop them from happening. “Oops, I screwed up!” should be rare but it should also be followed by “Ah, oh well, I’ll just restore the VM to a snapshot (or backup)!”
4.	Reward “Do-ing” over accepting the status quo. The changes that are introduced into technology systems should be changes that improve the system’s functionality or security. We can introduce zero changes into a system and that system will stay stable for a considerably long time. However, you will sacrifice security for that stability. Also, the rest of the world continues to move while your system stays static. That driver that your system needs to print to printers is no longer available on your system because the OS your system runs on is no longer supported by the printer manufacturing. Hopefully you grabbed a copy before they removed it from their site! Another scenario I have seen is supporting protocols on workstations that are known to be unsecure because the server the organization uses haven’t been patched, or worse cannot be patched. This is how SMB1 is still alive and well in some enterprises. 
Your team needs to feel safe to explore, create and innovate. They need to feel rewarded for their efforts. A risk-free, 100% stable IT environment is a fantasy. We need to make continuous improvements to systems, and we need people willing to take the risks to make these systems better. Otherwise, those young, ambitious engineers will become lazy and cynical engineers right before your eyes. 

